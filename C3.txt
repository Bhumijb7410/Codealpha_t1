#include <iostream >
#include <vector>
#include <string>
using namespace std;


class Transaction {
public:
string type;
double amount;


Transaction(string type, double amount) {
    this->type = type;
    this->amount = amount;
}


void displayTransaction() {
    cout << type << ": " << amount << endl;
}
};


class Account {
private:
int accountNumber;
double balance;
vector transactions;


public:
Account(int accountNumber, double initialBalance) {
this->accountNumber = accountNumber;
this->balance = initialBalance;
transactions.push_back(Transaction("Initial Deposit", initialBalance));
}


void deposit(double amount) {
    balance += amount;
    transactions.push_back(Transaction("Deposit", amount));
    cout << "Deposit successful. New balance: " << balance << endl;
}


void withdraw(double amount) {
    if (amount > balance) {
        cout << "Insufficient balance." << endl;
        return;
    }
    balance -= amount;
    transactions.push_back(Transaction("Withdrawal", amount));
    cout << "Withdrawal successful. New balance: " << balance << endl;
}


void transfer(Account& recipientAccount, double amount) {
    if (amount > balance) {
        cout << "Insufficient balance." << endl;
        return;
    }
    balance -= amount;
    recipientAccount.balance += amount;
    transactions.push_back(Transaction("Transfer", amount));
    recipientAccount.transactions.push_back(Transaction("Transfer", amount));
    cout << "Transfer successful." << endl;
}


void displayAccountInfo() {
    cout << "Account Number: " << accountNumber << endl;
    cout << "Balance: " << balance << endl;
}


void displayTransactionHistory() {
    cout << "Transaction History:" << endl;
    for (Transaction transaction : transactions) {
        transaction.displayTransaction();
    }
}
};


class Customer {
private:
string name;
vector accounts;


public:
Customer(string name) {
this->name = name;
}


void addAccount(Account account) {
    accounts.push_back(account);
}


void displayCustomerInfo() {
    cout << "Customer Name: " << name << endl;
    for (int i = 0; i < accounts.size(); i++) {
        cout << "Account " << i + 1 << ":" << endl;
        accounts[i].displayAccountInfo();
    }
}
};


int main() {
Customer customer("John Doe");
Account account1(12345, 1000);
Account account2(67890, 500);


customer.addAccount(account1);
customer.addAccount(account2);


customer.displayCustomerInfo();


account1.deposit(500);
account1.withdraw(200);
account1.transfer(account2, 300);


account1.displayTransactionHistory();
account2.displayTransactionHistory();


return 0;
}